// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE9bf8de2DecodeAvitoTest(in *jlexer.Lexer, out *Locations) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Locations, 0, 2)
			} else {
				*out = Locations{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Location
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9bf8de2EncodeAvitoTest(out *jwriter.Writer, in Locations) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Locations) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9bf8de2EncodeAvitoTest(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Locations) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9bf8de2EncodeAvitoTest(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Locations) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9bf8de2DecodeAvitoTest(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Locations) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9bf8de2DecodeAvitoTest(l, v)
}
func easyjsonE9bf8de2DecodeAvitoTest1(in *jlexer.Lexer, out *LocationResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			easyjsonE9bf8de2Decode(in, &out.Result)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9bf8de2EncodeAvitoTest1(out *jwriter.Writer, in LocationResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix[1:])
		easyjsonE9bf8de2Encode(out, in.Result)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LocationResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9bf8de2EncodeAvitoTest1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LocationResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9bf8de2EncodeAvitoTest1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LocationResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9bf8de2DecodeAvitoTest1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LocationResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9bf8de2DecodeAvitoTest1(l, v)
}
func easyjsonE9bf8de2Decode(in *jlexer.Lexer, out *struct {
	Locations Locations `json:"locations"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "locations":
			(out.Locations).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9bf8de2Encode(out *jwriter.Writer, in struct {
	Locations Locations `json:"locations"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"locations\":"
		out.RawString(prefix[1:])
		(in.Locations).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjsonE9bf8de2DecodeAvitoTest2(in *jlexer.Lexer, out *Location) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "names":
			easyjsonE9bf8de2Decode1(in, &out.Names)
		case "parent":
			if in.IsNull() {
				in.Skip()
				out.Parent = nil
			} else {
				if out.Parent == nil {
					out.Parent = new(struct {
						Id    int64 `json:"id"`
						Names struct {
							First string `json:"1"`
						} `json:"names"`
					})
				}
				easyjsonE9bf8de2Decode2(in, out.Parent)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9bf8de2EncodeAvitoTest2(out *jwriter.Writer, in Location) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"names\":"
		out.RawString(prefix)
		easyjsonE9bf8de2Encode1(out, in.Names)
	}
	if in.Parent != nil {
		const prefix string = ",\"parent\":"
		out.RawString(prefix)
		easyjsonE9bf8de2Encode2(out, *in.Parent)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Location) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9bf8de2EncodeAvitoTest2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Location) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9bf8de2EncodeAvitoTest2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Location) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9bf8de2DecodeAvitoTest2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Location) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9bf8de2DecodeAvitoTest2(l, v)
}
func easyjsonE9bf8de2Decode2(in *jlexer.Lexer, out *struct {
	Id    int64 `json:"id"`
	Names struct {
		First string `json:"1"`
	} `json:"names"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "names":
			easyjsonE9bf8de2Decode1(in, &out.Names)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9bf8de2Encode2(out *jwriter.Writer, in struct {
	Id    int64 `json:"id"`
	Names struct {
		First string `json:"1"`
	} `json:"names"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"names\":"
		out.RawString(prefix)
		easyjsonE9bf8de2Encode1(out, in.Names)
	}
	out.RawByte('}')
}
func easyjsonE9bf8de2Decode1(in *jlexer.Lexer, out *struct {
	First string `json:"1"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "1":
			out.First = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9bf8de2Encode1(out *jwriter.Writer, in struct {
	First string `json:"1"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"1\":"
		out.RawString(prefix[1:])
		out.String(string(in.First))
	}
	out.RawByte('}')
}
